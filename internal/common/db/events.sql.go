// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: events.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countEventsByUser = `-- name: CountEventsByUser :many
SELECT 
  user_id,
  COUNT(id) AS event_count
FROM events
WHERE occured_at BETWEEN $1 AND $2
GROUP BY user_id
`

type CountEventsByUserParams struct {
	OccuredAt   pgtype.Timestamp
	OccuredAt_2 pgtype.Timestamp
}

type CountEventsByUserRow struct {
	UserID     int64
	EventCount int64
}

func (q *Queries) CountEventsByUser(ctx context.Context, arg CountEventsByUserParams) ([]CountEventsByUserRow, error) {
	rows, err := q.db.Query(ctx, countEventsByUser, arg.OccuredAt, arg.OccuredAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CountEventsByUserRow
	for rows.Next() {
		var i CountEventsByUserRow
		if err := rows.Scan(&i.UserID, &i.EventCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createEvent = `-- name: CreateEvent :exec
INSERT INTO events (
  id, occured_at, user_id, action, metadata
) VALUES (
  $1, $2, $3, $4, $5
)
`

type CreateEventParams struct {
	ID        pgtype.UUID
	OccuredAt pgtype.Timestamp
	UserID    int64
	Action    string
	Metadata  []byte
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.Exec(ctx, createEvent,
		arg.ID,
		arg.OccuredAt,
		arg.UserID,
		arg.Action,
		arg.Metadata,
	)
	return err
}

const findByID = `-- name: FindByID :one
SELECT id, occured_at, user_id, action, metadata
FROM events
WHERE id = $1 
LIMIT 1
`

func (q *Queries) FindByID(ctx context.Context, id pgtype.UUID) (Event, error) {
	row := q.db.QueryRow(ctx, findByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.OccuredAt,
		&i.UserID,
		&i.Action,
		&i.Metadata,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, occured_at, user_id, action, metadata 
FROM events 
WHERE user_id = $1 
  AND occured_at BETWEEN $2 AND $3
ORDER BY occured_at
`

type ListEventsParams struct {
	UserID      int64
	OccuredAt   pgtype.Timestamp
	OccuredAt_2 pgtype.Timestamp
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEvents, arg.UserID, arg.OccuredAt, arg.OccuredAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.OccuredAt,
			&i.UserID,
			&i.Action,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
