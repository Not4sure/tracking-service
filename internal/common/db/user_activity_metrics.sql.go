// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_activity_metrics.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserActivityMetric = `-- name: CreateUserActivityMetric :exec
INSERT INTO user_activity_metrics (
  user_id, event_count, window_start_at, window_end_at, created_at
) VALUES (
  $1, $2, $3, $4, $5
)
`

type CreateUserActivityMetricParams struct {
	UserID        int64
	EventCount    int32
	WindowStartAt pgtype.Timestamp
	WindowEndAt   pgtype.Timestamp
	CreatedAt     pgtype.Timestamp
}

func (q *Queries) CreateUserActivityMetric(ctx context.Context, arg CreateUserActivityMetricParams) error {
	_, err := q.db.Exec(ctx, createUserActivityMetric,
		arg.UserID,
		arg.EventCount,
		arg.WindowStartAt,
		arg.WindowEndAt,
		arg.CreatedAt,
	)
	return err
}

const listUserActivityMetrics = `-- name: ListUserActivityMetrics :many
SELECT user_id, event_count, window_start_at, window_end_at, created_at 
FROM user_activity_metrics 
WHERE user_id = $1
  AND window_start_at BETWEEN $2 AND $3
ORDER BY window_start_at
`

type ListUserActivityMetricsParams struct {
	UserID          int64
	WindowStartAt   pgtype.Timestamp
	WindowStartAt_2 pgtype.Timestamp
}

func (q *Queries) ListUserActivityMetrics(ctx context.Context, arg ListUserActivityMetricsParams) ([]UserActivityMetric, error) {
	rows, err := q.db.Query(ctx, listUserActivityMetrics, arg.UserID, arg.WindowStartAt, arg.WindowStartAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserActivityMetric
	for rows.Next() {
		var i UserActivityMetric
		if err := rows.Scan(
			&i.UserID,
			&i.EventCount,
			&i.WindowStartAt,
			&i.WindowEndAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
